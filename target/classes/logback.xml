<?xml version="1.0" encoding="UTF-8"?>

<configuration scan="true" scanPeriod="30 seconds">
    <!-- ConsoleAppender : 콘솔에 로그를 어떤 포맷으로 출력할지를 설정할 때 사용  -->

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <Pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</Pattern>
        </encoder>
    </appender>
	<!--
		FileAppender : 파일에 로그를 어떤 포맷으로 출력할지를 설정.
		RollingFileAppender : 로그의 양이 많아지면, 하나의 파일로 관리하기 어려워지는 경우가 생긴다. 
		이런 문제를 해결하기 위해 하루 단위로 로그를 관리하고자 할 경우 사용된다.
	-->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>/tmp/access.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>/tmp/access-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder>
            <Pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</Pattern>
        </encoder>
    </appender>
	<!--
		Log Level
		ex. info 레벨이 설정되면 info 이상의 레벨인 info, warn, error에 대한 로그가 기록됨
			Level이 높을수록 심각한 오류를 의미
			
		trace : debug보다 세분화된 정보
		debug : 디버깅하는데 유용한 세분화된 정보
		info : 진행상황 같은 일반 정보
		warn : 오류는 아니지만 잠재적인 오류 원인이 될 수 있는 경고성 정보
		error : 요청을 처리하는 중 문제가 발생한 오류 정보
 
		org.springframework로 시작하는 패키지에 속한 클래스에서 출력하는 로그는 
		info 레벨이 설정되면 info 이상의 레벨인 info, warn, error에 대한 로그를 기록하라는 의미
	-->
	
    <logger name="org.springframework" level="error"/>
    <logger name="com.example.board.board.controller.BoardController" level="debug"/>
	
	<!--
		root 테그에 설정하면 모든 대상에 대해 CONSOLE과 FILE Appender를 적용하라는 의미.
		즉, 콘솔과 파일 양쪽에 로그 출력
	-->
	
    <root level="info">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
    </root>
   
</configuration>

